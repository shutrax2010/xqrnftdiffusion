<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" type="image/x-icon" href="../assets/PhygitalifyQR icon.png">
  <title>NFT List</title>
  <style>
    body {
      font: 18px "Lucida Grande", Helvetica, Arial, sans-serif;
      color: #030340;
      background-color: #f1f1f1;
      margin: 10px;
    }
    .nft-header{
      font: 18px "Lucida Grande", Helvetica, Arial, sans-serif;
      color: white;
      background-color: #030340;
      padding: 0px 30px;
    }

    ul {
      list-style-type: none;
      padding: 0px 40px;
      display: flex;
      flex-wrap: wrap;
    }

    li {
      margin: 20px;
    }

    img {
      max-width: 200px;
      max-height: 200px;
    }

    /* Popup styles */
    .popup, .qr-popup {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: #030340;
      padding: 20px;
      border: 1px solid #ccc;
      z-index: 1000;
      color:#f1f1f1;
    }

    .popup-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 999;
    }

    .popup-content {
      position: relative;
    }

    .popup-open {
      overflow: hidden;
    }

    button {
      background-color: #34a343;
      padding: 3px 12px;
      border: none;
      border-radius: 6%;
      color: white;
    }

    .closeButton {
      background-color: #db0d29;
      position: absolute;
      bottom: 20px;
      right: 10px;
    }

    .acceptButton {
      background-color: #345d9e;
    }

    .tabcontent {
      display: none;
    }
    .tabs {
      display: flex;
      justify-content: flex-start;
      margin-bottom: 10px;
      position: relative;
    }

    .tablinks {
      padding: 10px;
      cursor: pointer;
      position: relative;
      text-align: center;
    }

    .tablinks.active {
      background-color: #f1f1f1; 
      color: #030340; 
    }

    .clickable {
      transition: transform 0.2s ease-in-out;
    }

    .clickable:hover {
      transform: scale(1.05);
      cursor: pointer;
    }

    .filter{
      display: flex;
      flex-direction: column;
    }

  </style>
</head>
<body>
  <div class = "nft-header">
    <h1>NFT Tickets</h1>
    <div class="tabs-container">
      <!-- Tabs -->
      <div class="tabs">
          <div class="tablinks clickable" data-tab="NFTs">NFTs</div>
          <div class="tablinks clickable" data-tab="Offers">Offers</div>
      </div>
    </div>
  </div>

  <!-- NFTs Tab Content -->
  <div id="NFTs" class="tabcontent">
    <!-- Input field for filtering -->
    <div class="filter">
      <label for="filterByTaxon">Event Group</label>
      <input type="text" id="filterByTaxon" placeholder="Enter Event ...">
      <button class="clickable" onclick="clearTaxonomyFilter()">Clear Filter</button>
      <br><hr>
    </div>
    <br><br>

    <ul>
      <% if (nfts.length === 0 ) { %>
        <li>No NFTs to display</li>
      <% } else { %>
        <% nfts.forEach(nft => { %>
          <a class="clickable" href="<%= bithompUrl + nft.id %>" target="_blank">
          <li>
            <% if (nft.imageUrl !== "") { %>
              <img class="clickable" src="<%= nft.imageUrl %>" alt="NFT Image">
            <% } else { %>
              <img class="clickable" src="../assets/no-image.svg" style="width: 200px; height: 200px;" alt="NFT Image">
            <% } %>
          </a>
            <br>
            <strong>Name:</strong>
            <% if (nft.name.length > 15) { %>
              <% 
                let maxLength = 15; 
                let words = nft.name.split(' ');
                let currentLine = '';
                let formattedName = '';

                words.forEach(word => {
                  if ((currentLine + word).length > maxLength) {
                    formattedName += currentLine.trim() + '<br>';
                    currentLine = word + ' ';
                  } else {
                    currentLine += word + ' ';
                  }
                });
                formattedName += currentLine.trim();
              %>
              <%- formattedName %><br>
            <% } else { %>
              <%= nft.name %><br>
            <% } %>
            <% if (nft.offers.length > 0) { %>
              <p><%= nft.offers[0].amount %> XRP</p>
            <% } else { %>
              <button class="sell-offer clickable" onclick="createOffer('<%= nft.id %>')">Create Offer</button>
            <% } %>
          </li>
        <% }); %>
        <% } %>
      </ul>
  </div>

  <!-- Offers Tab Content -->
  <div id="Offers" class="tabcontent">
    <ul>
      <% 
      let hasOffers = false;
      Sysnfts.forEach(nft => { 
        if (nft.offers.length > 0) { 
          hasOffers = true; 
        }
      }); 
    %>

    <% if (!hasOffers) { %>
        <li>No offers to display</li>
    <% } else { %>
      <% Sysnfts.forEach(nft => { %>
        <%if (nft.offers.length > 0) {%>
        <a class="clickable" href="<%= bithompUrl + nft.id %>" target="_blank">
        <li>
          <% if (nft.imageUrl !== "") { %>
            <img class="clickable" src="<%= nft.imageUrl %>" alt="NFT Image">
          <% } else { %>
            <img class="clickable" src="../assets/no-image.svg" style="width: 200px; height: 200px;" alt="NFT Image">
          <% } %>
        </a>
          <br>
          <strong>Name:</strong>
          <% if (nft.name.length > 15) { %>
            <% 
              let maxLength = 15; 
              let words = nft.name.split(' ');
              let currentLine = '';
              let formattedName = '';

              words.forEach(word => {
                if ((currentLine + word).length > maxLength) {
                  formattedName += currentLine.trim() + '<br>';
                  currentLine = word + ' ';
                } else {
                  currentLine += word + ' ';
                }
              });
              formattedName += currentLine.trim();
            %>
            <%- formattedName %><br>
          <% } else { %>
            <%= nft.name %><br>
          <% } %>
            <button class="view-offer clickable" onclick="showOffers(<%= JSON.stringify(nft.offers) %>)">View Offers</button>
        </li>
        <% } %>
      <% }); %>
      <% } %>
    </ul>
  </div>

  <!-- Popup for displaying offers -->
  <div class="popup-overlay" id="popup-overlay"></div>
  <div class="popup" id="popup">
    <h2>Offers</h2>
    <div id="offers-list"></div>
    <button class="closeButton clickable" onclick="closePopup()">Close</button>
  </div>

  <!-- Popup for displaying QR code -->
  <div class="popup-overlay" id="qr-popup-overlay"></div>
  <div class="qr-popup" id="qr-popup">
    <h2>Scan the QR code</h2>
    <div id="qr-code-container"></div>
    <button class="closeButton clickable" onclick="closeQrPopup()">Close</button>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const tabLinks = document.querySelectorAll('.tablinks');
      const tabContents = document.querySelectorAll('.tabcontent');

      tabLinks.forEach(link => {
        link.addEventListener('click', function() {
          tabLinks.forEach(item => item.classList.remove('active'));
          tabContents.forEach(content => content.style.display = 'none');

          const tab = this.getAttribute('data-tab');
          document.getElementById(tab).style.display = 'block';
          this.classList.add('active');
        });
      });

      // Default to displaying the first tab
      tabLinks[0].click();
    });

    function showOffers(offers) {
      const offersList = document.getElementById('offers-list');
      offersList.innerHTML = ''; // Clear previous offers

      offers.forEach(offer => {
        const offerDiv = document.createElement('div');
        const amountInXRP = offer.amount / 1000000;
        offerDiv.innerHTML = `
          <p>Offer Amount: ${amountInXRP} XRP</p>
          <p>Offer Owner: ${offer.owner}</p>
          <p>Expiry: ${offer.expiry ? new Date(offer.expiry * 1000).toLocaleString() : 'No expiry'}</p>
          <button class="acceptButton clickable" onclick="acceptOffer('${offer.nft_offer_index}')">Accept Offer</button>
        `;
        offersList.appendChild(offerDiv);
      });

      document.getElementById('popup-overlay').style.display = 'block';
      document.getElementById('popup').style.display = 'block';
      document.body.classList.add('popup-open');
    }

    function closePopup() {
      document.getElementById('popup-overlay').style.display = 'none';
      document.getElementById('popup').style.display = 'none';
      document.body.classList.remove('popup-open');
    }

    function closeQrPopup() {
      document.getElementById('qr-popup-overlay').style.display = 'none';
      document.getElementById('qr-popup').style.display = 'none';
      document.body.classList.remove('popup-open');
    }

    async function acceptOffer(offerId) {
      try {
        const response = await fetch('/nftList/accept-offer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ offerId }),
          redirect: 'follow'
        });

        if (response.ok) {
          const result = await response.json();
          if (result.payloadUrl) {
            // Show the QR code in the QR popup
            const qrCodeContainer = document.getElementById('qr-code-container');
            qrCodeContainer.innerHTML = `
              <p>Scan the QR code with your Xumm app to accept the offer:</p>
              <img src="${result.payloadUrl}" alt="Xumm QR Code">
            `;
            document.getElementById('qr-popup-overlay').style.display = 'block';
            document.getElementById('qr-popup').style.display = 'block';
            closePopup(); // Close the offers popup
          } else {
            alert('Offer accepted successfully');
            closePopup();
          }
        } else {
          const errorText = await response.text();
          console.error('Error accepting offer:', errorText);
          alert('Error accepting offer: ' + errorText);
        }
      } catch (error) {
        console.error('Error accepting offer:', error);
        alert('Error accepting offer: ' + error.message);
      }
    }

    async function createOffer(nftId) {
  const price = prompt("Enter the price in XRP:");
  if (price) {
    try {
      let retryCount = 0;
      const maxRetries = 3;
      while (retryCount < maxRetries) {
        const response = await fetch('/nftList/create-offer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ nftId, price })
        });
        const result = await response.json();
        if (result.success) {
          // Update UI or handle success
          alert("Sell offer created successfully!");
          return; // Exit function on success
        } else {
          // Retry or handle specific errors
          retryCount++;
          await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second before retrying
        }
      }
      alert("Maximum retries exceeded. Failed to create sell offer.");
    } catch (error) {
      alert("Error creating sell offer: " + error.message);
    }
  }
}

  </script>
</body>
</html>
