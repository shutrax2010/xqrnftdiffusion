<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" type="image/x-icon" href="../assets/PhygitalifyQR icon.png">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel='stylesheet' href='/stylesheets/styles_nftList.css' />
  <title>NFT List</title>
</head>
<body>
  <div class = "nft-header">
    <div class="logoWithHeader">
      <a href = "/menu"><img src="../assets/PhygitalifyQR icon.png" alt="PhygitalifyQR Icon" class="logo clickable"></a>
      <h1 class = "site-name"><a href="/menu">PhygitalifyQR</a></h1>
    </div>

    <div class="tabs-container">
      <!-- Tabs -->
      <div class="tabs">
          <div class="tablinks clickable" data-tab="NFTs">NFTs</div>
          <div class="tablinks clickable" data-tab="Offers">Offers</div>
      </div>
    </div>
  </div>

  <!-- NFTs Tab Content -->
  <div id="NFTs" class="tabcontent">
    <!-- Input field for filtering -->
    <div class="filter">
      <label for="filterByTaxon">Event Group</label>
      <div class="custom-select-wrapper">
        <select id="filterByTaxon" onchange="filterNFTsByTaxon()">
          <option value="">Select Event...</option>
          <% 
          const uniqueTaxons = [...new Set(nfts.map(nft => nft.NFTokenTaxon))];
          uniqueTaxons.sort((a, b) => a - b);
          uniqueTaxons.forEach(taxon => { %>
            <option value="<%= taxon %>"><%= taxon %></option>
          <% }); %>
        </select>
      </div>
    </div>
    <br><hr>

    <ul id="nftContainer">
      <% if (nfts.length === 0 ) { %>
        <li>No NFTs to display</li>
      <% } else { %>
        <% nfts.forEach(nft => { %>
          <a class="clickable" href="<%= bithompUrl + nft.id %>" target="_blank">
          <li class="nft-item" data-taxonomy="<%= nft.NFTokenTaxon %>">
            <% if (nft.imageUrl !== "") { %>
              <img class="clickable" src="<%= nft.imageUrl %>" alt="NFT Image">
            <% } else { %>
              <img class="clickable" src="../assets/no-image.svg" style="width: 200px; height: 200px;" alt="NFT Image">
            <% } %>
          </a>
            <br>
            <strong>Name:</strong>
            <% if (nft.name.length > 15) { %>
              <% 
                let maxLength = 15; 
                let words = nft.name.split(' ');
                let currentLine = '';
                let formattedName = '';

                words.forEach(word => {
                  if ((currentLine + word).length > maxLength) {
                    formattedName += currentLine.trim() + '<br>';
                    currentLine = word + ' ';
                  } else {
                    currentLine += word + ' ';
                  }
                });
                formattedName += currentLine.trim();
              %>
              <%- formattedName %><br>
            <% } else { %>
              <%= nft.name %><br>
            <% } %>
            <% if (nft.offers.length > 0) { %>
              <p><%= nft.offers[0].amount/ 1000000 %> XRP</p>
            <% } else { %>
              <button class="sell-offer clickable" onclick="createOffer('<%= nft.id %>')">Create Offer</button>
            <% } %>
          </li>
        <% }); %>
        <% } %>
      </ul>
  </div>

  <!-- Offers Tab Content -->
  <div id="Offers" class="tabcontent">
    <ul>
      <% 
      let hasOffers = false;
      Sysnfts.forEach(nft => { 
        if (nft.offers.length > 0) { 
          hasOffers = true; 
        }
      }); 
    %>

    <% if (!hasOffers) { %>
        <li>No offers to display</li>
    <% } else { %>
      <% Sysnfts.forEach(nft => { %>
        <%if (nft.offers.length > 0) {%>
        <a class="clickable" href="<%= bithompUrl + nft.id %>" target="_blank">
        <li>
          <% if (nft.imageUrl !== "") { %>
            <img class="clickable" src="<%= nft.imageUrl %>" alt="NFT Image">
          <% } else { %>
            <img class="clickable" src="../assets/no-image.svg" style="width: 200px; height: 200px;" alt="NFT Image">
          <% } %>
        </a>
          <br>
          <strong>Name:</strong>
          <% if (nft.name.length > 15) { %>
            <% 
              let maxLength = 15; 
              let words = nft.name.split(' ');
              let currentLine = '';
              let formattedName = '';

              words.forEach(word => {
                if ((currentLine + word).length > maxLength) {
                  formattedName += currentLine.trim() + '<br>';
                  currentLine = word + ' ';
                } else {
                  currentLine += word + ' ';
                }
              });
              formattedName += currentLine.trim();
            %>
            <%- formattedName %><br>
          <% } else { %>
            <%= nft.name %><br>
          <% } %>
            <button class="view-offer clickable" onclick="showOffers(<%= JSON.stringify(nft.offers) %>)">View Offers</button>
        </li>
        <% } %>
      <% }); %>
      <% } %>
    </ul>
  </div>

  <!-- Popup for displaying offers -->
  <div class="popup-overlay" id="popup-overlay"></div>
  <div class="popup" id="popup">
    <h2>Offers</h2>
    <div id="offers-list"></div>
    <button class="closeButton clickable" onclick="closePopup()">Close</button>
  </div>

  <!-- Popup for displaying QR code -->
  <div class="popup-overlay" id="qr-popup-overlay"></div>
  <div class="qr-popup" id="qr-popup">
    <h2>Scan the QR code</h2>
    <div id="qr-code-container"></div>
    <button class="closeButton clickable" onclick="closeQrPopup()">Close</button>
  </div>

  <!-- Create Offer Popup -->
  <div id="create-offer-popup-overlay" style="display: none;">
    <div id="create-offer-popup">
      <h2>Create Offer</h2>
      <p id="nft-id"></p>
      <label for="price">Price (in XRP):</label>
      <input type="text" id="price">
      <button onclick="submitOffer()">Submit</button>
      <button onclick="closeCreateOfferPopup()">Close</button>
      <div id="loading-animation" style="display: none;">Loading...</div>
    </div>
  </div>

  <script>
    let currentNftId = '';

    function createOffer(nftId) {
      currentNftId = nftId;
      document.getElementById('nft-id').innerText = `NFT ID: ${nftId}`;
      document.getElementById('create-offer-popup-overlay').style.display = 'block';
    }


    document.addEventListener('DOMContentLoaded', function() {
      const tabLinks = document.querySelectorAll('.tablinks');
      const tabContents = document.querySelectorAll('.tabcontent');
      const defaultTab = <%= defaultTab %>;

      tabLinks.forEach(link => {
        link.addEventListener('click', function() {
          tabLinks.forEach(item => item.classList.remove('active'));
          tabContents.forEach(content => content.style.display = 'none');

          const tab = this.getAttribute('data-tab');
          document.getElementById(tab).style.display = 'block';
          this.classList.add('active');
        });
      });

      // Default to displaying the first tab
      tabLinks[defaultTab || 0].click();
    });

    function showOffers(offers) {
      const offersList = document.getElementById('offers-list');
      offersList.innerHTML = ''; // Clear previous offers

      offers.forEach(offer => {
        const offerDiv = document.createElement('div');
        const amountInXRP = offer.amount / 1000000;
        offerDiv.innerHTML = `
          <p>Offer Amount: ${amountInXRP} XRP</p>
          <p>Offer Owner: ${offer.owner}</p>
          <p>Expiry: ${offer.expiry ? new Date(offer.expiry * 1000).toLocaleString() : 'No expiry'}</p>
          <button class="acceptButton clickable" onclick="acceptOffer('${offer.nft_offer_index}')">Accept Offer</button>
        `;
        offersList.appendChild(offerDiv);
      });

      document.getElementById('popup-overlay').style.display = 'block';
      document.getElementById('popup').style.display = 'block';
      document.body.classList.add('popup-open');
    }

    function closePopup() {
      document.getElementById('popup-overlay').style.display = 'none';
      document.getElementById('popup').style.display = 'none';
      document.body.classList.remove('popup-open');
    }

    function closeQrPopup() {
      document.getElementById('qr-popup-overlay').style.display = 'none';
      document.getElementById('qr-popup').style.display = 'none';
      document.body.classList.remove('popup-open');
    }

    async function acceptOffer(offerId) {
      try {
        const response = await fetch('/nftList/accept-offer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ offerId }),
          redirect: 'follow'
        });

        if (response.ok) {
          const result = await response.json();
          if (result.payloadUrl) {
            // Show the QR code in the QR popup
            const qrCodeContainer = document.getElementById('qr-code-container');
            qrCodeContainer.innerHTML = `
              <p>Scan the QR code with your Xumm app to accept the offer:</p>
              <img src="${result.payloadUrl}" alt="Xumm QR Code">
            `;
            document.getElementById('qr-popup-overlay').style.display = 'block';
            document.getElementById('qr-popup').style.display = 'block';
            closePopup(); // Close the offers popup

            // Poll the server for the payload status
            const intervalId = setInterval(async () => {
              try {
                const response = await fetch(`/nftList/payload-status/${result.uuid}`);
                const payloadData = await response.json();

                if (payloadData.signed) {
                  clearInterval(intervalId);
                  console.log('Offer acceptance completed!');
                  // Optionally, you can refresh the page or update the UI here
                  document.getElementById('qr-popup-overlay').style.display = 'none';
                  document.getElementById('qr-popup').style.display = 'none';
                  // Reload or update the UI as needed
                } else if (payloadData.status === 'rejected') {
                  clearInterval(intervalId);
                  console.log('Offer acceptance declined');
                  alert('Offer acceptance declined');
                }
              } catch (error) {
                console.error('Error fetching payload status:', error);
              }
            }, 5000); // Check status every 5 seconds
          } else {
            alert('Offer accepted successfully');
            closePopup();
          }
        } else {
          const errorText = await response.text();
          console.error('Error accepting offer:', errorText);
          alert('Error accepting offer: ' + errorText);
        }
      } catch (error) {
        console.error('Error accepting offer:', error);
        alert('Error accepting offer: ' + error.message);
      }
    }

    //create offer 
    async function submitOffer() {
      const price = document.getElementById('price').value;
      if (price) {
        try {
          document.getElementById('loading-animation').style.display = 'block';

          const response = await fetch('/nftList/create-offer', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ nftId: currentNftId, price })
          });

          document.getElementById('loading-animation').style.display = 'none';

          if (response.ok) {
            const result = await response.json();
            if (result.payloadUrl) {
              // Show the QR code in the QR popup
              const qrCodeContainer = document.getElementById('qr-code-container');
              qrCodeContainer.innerHTML = `
                <p>Scan the QR code with your Xumm app to create the offer:</p>
                <img src="${result.payloadUrl}" alt="Xumm QR Code">
              `;
              document.getElementById('qr-popup-overlay').style.display = 'block';
              document.getElementById('qr-popup').style.display = 'block';
            } else {
              alert('Offer created successfully');
              closeQrPopup();
            }
          } else {
            const errorText = await response.text();
            console.error('Error creating offer:', errorText);
            alert('Error creating offer: ' + errorText);
          }

          closeCreateOfferPopup();
        } catch (error) {
          document.getElementById('loading-animation').style.display = 'none';
          console.error('Error creating offer:', error);
          alert('Error creating offer: ' + error.message);
        }
      }
    }

    function closeCreateOfferPopup() {
      document.getElementById('create-offer-popup-overlay').style.display = 'none';
    }

    function filterNFTsByTaxon() {
      const selectedTaxon = document.getElementById('filterByTaxon').value;
      const nfts = document.querySelectorAll('.nft-item');

      nfts.forEach(nft => {
        const taxon = nft.getAttribute('data-taxonomy');
        if (selectedTaxon === '' || taxon === selectedTaxon) {
          nft.style.display = 'block';
        } else {
          nft.style.display = 'none';
        }
      });
    }
  </script>
</body>
</html>
